@page "/DispatchUI"
@using DispatchSystemDemo.Data
@rendermode InteractiveServer
@inject IJSRuntime JSRuntime;

<div class="row mb-2">
    <div class="col-md-1">
        <label for="rows" class="demo-text cw-320 mb-1">
            Rows:
        </label>
        <DxSpinEdit @bind-Value="@Rows"
                    CssClass="cw-320"
                    InputId="rows" />
    </div>

    <div class="col-md-1">
        <label for="cols" class="demo-text cw-320 mb-1">
            Columns:
        </label>
        <DxSpinEdit @bind-Value="@Cols"
                    CssClass="cw-320"
                    InputId="cols" />
    </div>

    <div class="col-md-2">
        <label for="add-card" class="demo-text cw-320 mb-1">
            Card content
        </label>
        <DxTextBox @bind-Text="@CardText"
                   CssClass="cw-320"
                   InputId="add-card" />
    </div>

    <div class="col-md-2" style="padding-top:1.5rem;">
        <DxButton RenderStyle="ButtonRenderStyle.Primary"
                  Text="Add card"
                  Click="AddCard"
                  CssClass="w-100" />
    </div>

</div>

<div id="order-sheet-container" class="mb-2">
    <div class="order-sheet-cards" id="order-sheet-cards-container" @ondrop="@(async () => await OnDropCardsContainer())">
        @{
            foreach (var card in Cards)
            {
                <div class="order-sheet-card" draggable="true" @ondragstart="@(() => OnDragStart(card))">
                    <button class="delete-btn" @onclick="(async () => await RemoveCard(card))">×</button>
                    <div class="order-sheet-card-text">@(card.CardText)</div>
                </div>
            }
        }
    </div>
</div>

<table class="table" id="dispatch-ui-table">
    <thead>
        <tr>
            <th></th>
            @for (int i = 1; i <= Cols; i++)
            {
                <th class="column-index-cell">@GetColumnHeader(i)</th>
            }
        </tr>
    </thead>
    <tbody>
        @for (int i = 0; i < Rows; i++)
        {
            <tr>
                <td class="row-index-cell">@(i + 1)</td>
                @for (int j = 0; j < Cols; j++)
                {
                    int rowIndex = i;
                    int columnIndex = j;
                    <td class="draggable-cell" draggable="true" @ondrop="@(() => OnDropCell(rowIndex, columnIndex))"></td>
                }
            </tr>
        }
    </tbody>
</table>

@code {
    private int Rows = 3;
    private int Cols = 2;
    private string CardText = string.Empty;

    private List<string> OrderSheetCardContent = new List<string>();
    private List<Card> Cards = new List<Card>();
    private Card CardBeingTracked;

    public EventCallback<CardAddingEventArgs> CardAdding { get; set; }
    public EventCallback<CardAddedEventArgs> CardAdded { get; set; }
    public EventCallback<CardDeletingEventArgs> CardDeleting { get; set; }
    public EventCallback<CardDeletedEventArgs> CardDeleted { get; set; }
    public EventCallback<CardChangingEventArgs> CardChanging { get; set; }
    public EventCallback<CardChangedEventArgs> CardChanged { get; set; }

    public CardAddingEventArgs CardAddingEventArgs { get; set; }
    public CardDeletingEventArgs CardDeletingEventArgs { get; set; }
    public CardChangingEventArgs CardChangingEventArgs { get; set; }

    protected override void OnInitialized()
    {

        Cards = new List<Card>()
        {
            new Card(){ CardId = 1, CardText = "1 -> 2" },
            new Card(){ CardId = 2, CardText = "1 -> 8" },
            new Card(){ CardId = 3, CardText = "1 -> 9" },
            new Card(){ CardId = 4, CardText = "3 -> 7" },
            new Card(){ CardId = 5, CardText = "5 -> 6" },
            new Card(){ CardId = 6, CardText = "6 -> 7" },
        };

        OrderSheetCardContent = new List<string>()
        {
            "1 -> 2",
            "1 -> 8",
            "1 -> 9",
            "3 -> 7",
            "5 -> 6",
            "6 -> 7",
        };
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("initializeDragAndDrop");
        }
    }

    private async Task AddCard(MouseEventArgs args)
    {
        if (!string.IsNullOrWhiteSpace(CardText) && !OrderSheetCardContent.Any(A => A == CardText))
        {
            OrderSheetCardContent.Add(CardText);
            //await InvokeAsync(StateHasChanged);
            await Task.Delay(1);
            await JSRuntime.InvokeVoidAsync("attachDragListenerToNewCards");
            CardText = string.Empty;
            // Card card = new Card()
            //     {
            //         CardText = CardText
            //     };
            // var cardAddingEventArgs = new CardAddingEventArgs(card);

            // Invoked card adding card before adding the card
            //await CardAdding.InvokeAsync(cardAddingEventArgs);

            // Checked wheather the operation is canceled by handler
            // if (!cardAddingEventArgs.Cancel)
            // {
            //     // Database operation can be performed here



            //     // Invoked card added event
            //     await CardAdded.InvokeAsync(new CardAddedEventArgs(card));
            // }
        }
    }

    private async Task RemoveCard(Card card)
    {
        CardDeletingEventArgs = new CardDeletingEventArgs(card);

        // Invoke card deleting event before deleting the card
        await CardDeleting.InvokeAsync(CardDeletingEventArgs);

        if (!CardDeletingEventArgs.Cancel)
        {
            await JSRuntime.InvokeVoidAsync("removeParentByContent", card.CardText);

            // Invoke card deleted event once the card is deleted
            await CardDeleted.InvokeAsync(new CardDeletedEventArgs(card));
        }
    }

    public string GetColumnHeader(int columnIndex)
    {
        string columnHeader = "";
        while (columnIndex > 0)
        {
            int remainder = (columnIndex - 1) % 26;
            columnHeader = (char)('A' + remainder) + columnHeader;
            columnIndex = (columnIndex - remainder) / 26;
        }
        return columnHeader;
    }

    private async Task OnDragStart(Card card)
    {
        CardBeingTracked = card;

        if (CardBeingTracked.CardStatus == CardStatus.InCardsSection)
        {
            CardAddingEventArgs = new CardAddingEventArgs(card);
            await CardAdding.InvokeAsync(CardAddingEventArgs);
        }
        else if (CardBeingTracked.CardStatus == CardStatus.Added)
        {
            CardDeletingEventArgs = new CardDeletingEventArgs(card);
            await CardDeleting.InvokeAsync(CardDeletingEventArgs);

            CardChangingEventArgs = new CardChangingEventArgs(card);
            await CardChanging.InvokeAsync(CardChangingEventArgs);
        }
    }

    private async Task OnDropCell(int row, int column)
    {
        if (CardAddingEventArgs != null && !CardAddingEventArgs.Cancel)
        {
            CardBeingTracked.Row = row;
            CardBeingTracked.Column = column;
            CardBeingTracked.CardStatus = CardStatus.Added;

            await CardAdded.InvokeAsync(new CardAddedEventArgs(CardBeingTracked));
            CardAddingEventArgs = null;
        }

        if (CardChangingEventArgs != null && !CardChangingEventArgs.Cancel && CardBeingTracked.CardStatus == CardStatus.Added
            && (CardBeingTracked.Row != row || CardBeingTracked.Column != column))
        {
            // Card changed code here
            await CardChanged.InvokeAsync(new CardChangedEventArgs(CardBeingTracked));
            CardChangingEventArgs = null;
        }
    }

    private async Task OnDropCardsContainer()
    {
        if (CardBeingTracked.CardStatus == CardStatus.Added && !CardDeletingEventArgs.Cancel)
        {
            await CardDeleted.InvokeAsync(new CardDeletedEventArgs(CardBeingTracked));
        }
    }

    #region XXXing & XXXed event handler examples
    /// <summary>
    /// Example card adding event handler
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task HandleCardAdding(CardAddingEventArgs e)
    {
        // Validation
        if (string.IsNullOrWhiteSpace(e.Card.CardText))
        {
            e.Cancel = true;
            await Task.CompletedTask;
        }

        // Database operation can be performed here

        await Task.CompletedTask;
    }

    /// <summary>
    /// Example card added event handler
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task HandleCardAdded(CardAddedEventArgs e)
    {
        //

        await Task.CompletedTask;
    }

    /// <summary>
    /// Example card deleting event handler
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task HandleCardDeleting(CardDeletingEventArgs e)
    {
        // Validation
        if (false)
        {
            e.Cancel = true;
            await Task.CompletedTask;
        }

        // Database operation can be performed here

        await Task.CompletedTask;
    }

    /// <summary>
    /// Example card deleted
    /// </summary>
    /// <param name="e"></param>
    /// <returns></returns>
    private async Task HandleCardDeleted(CardDeletedEventArgs e)
    {
        //

        await Task.CompletedTask;
    }

    private async Task HandleCardChanging(CardChangingEventArgs e)
    {
        // Validation
        if (false)
        {
            e.Cancel = true;
            await Task.CompletedTask;
        }

        // Database operation can be performed here

        await Task.CompletedTask;
    }

    private async Task HandleCardChanged(CardChangedEventArgs e)
    {
        //

        await Task.CompletedTask;
    }
    #endregion
}
